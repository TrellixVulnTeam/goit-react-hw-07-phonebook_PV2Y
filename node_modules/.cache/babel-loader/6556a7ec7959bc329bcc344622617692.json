{"ast":null,"code":"var _jsxFileName = \"E:\\\\Github\\\\react-01\\\\goit-react-hw-07-phonebook\\\\src\\\\components\\\\ContactList\\\\ContactList.jsx\";\nimport { connect } from \"react-redux\";\nimport phonebookOperations from \"../../redux/phonebook/phonebook-operations\";\nimport ContactListItem from \"./ContactListItem\";\nimport { getFilteredContacts } from '../../redux/phonebook/phonebook-selectors';\nimport \"./ContactList.scss\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContactList = ({\n  contacts,\n  onDeleteContact\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"contact-list\",\n    children: contacts.map(contact => /*#__PURE__*/_jsxDEV(ContactListItem, {\n      id: contact.id,\n      name: contact.name,\n      number: contact.number,\n      onDeleteContact: onDeleteContact\n    }, contact.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }, this);\n};\n\n_c = ContactList;\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired\n}; // const getFilteredContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n//     return allContacts.filter(({name}) =>\n//     name.toLowerCase().includes(normalizedFilter)\n//   );\n// };\n\nconst mapStateToProps = state => ({\n  contacts: getFilteredContacts(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: contactId => dispatch(phonebookOperations.deleteContact(contactId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"sources":["E:/Github/react-01/goit-react-hw-07-phonebook/src/components/ContactList/ContactList.jsx"],"names":["connect","phonebookOperations","ContactListItem","getFilteredContacts","PropTypes","ContactList","contacts","onDeleteContact","map","contact","id","name","number","propTypes","array","isRequired","mapStateToProps","state","mapDispatchToProps","dispatch","contactId","deleteContact"],"mappings":";AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,mBAAP,MAAgC,4CAAhC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,mBAAT,QAAoC,2CAApC;AACA,OAAO,oBAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAmC;AAErD,sBACA;AAAI,IAAA,SAAS,EAAC,cAAd;AAAA,cACGD,QAAQ,CAACE,GAAT,CAAcC,OAAD,iBACZ,QAAC,eAAD;AACE,MAAA,EAAE,EAAEA,OAAO,CAACC,EADd;AAGE,MAAA,IAAI,EAAED,OAAO,CAACE,IAHhB;AAIE,MAAA,MAAM,EAAEF,OAAO,CAACG,MAJlB;AAKE,MAAA,eAAe,EAAEL;AALnB,OAEOE,OAAO,CAACC,EAFf;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADA;AAYA,CAdF;;KAAML,W;AAmBNA,WAAW,CAACQ,SAAZ,GAAwB;AACtBP,EAAAA,QAAQ,EAAEF,SAAS,CAACU,KAAV,CAAgBC;AADJ,CAAxB,C,CAIA;AACA;AACA;AACA;AACA;AAGA;;AAEA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCX,EAAAA,QAAQ,EAAEH,mBAAmB,CAACc,KAAD;AADK,CAAZ,CAAxB;;AAMA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCZ,EAAAA,eAAe,EAAGa,SAAD,IACfD,QAAQ,CAAClB,mBAAmB,CAACoB,aAApB,CAAkCD,SAAlC,CAAD;AAF8B,CAAf,CAA3B;;AAKA,eAAepB,OAAO,CAACgB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cb,WAA7C,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport phonebookOperations from \"../../redux/phonebook/phonebook-operations\";\nimport ContactListItem from \"./ContactListItem\";\nimport { getFilteredContacts } from '../../redux/phonebook/phonebook-selectors';\nimport \"./ContactList.scss\";\nimport PropTypes from \"prop-types\";\n\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  \n  return (\n  <ul className=\"contact-list\">\n    {contacts.map((contact) => (\n      <ContactListItem\n        id={contact.id}\n        key={contact.id}\n        name={contact.name}\n        number={contact.number}\n        onDeleteContact={onDeleteContact}\n      />\n    ))}\n  </ul>\n)};\n\n\n\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};\n\n// const getFilteredContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n//     return allContacts.filter(({name}) =>\n//     name.toLowerCase().includes(normalizedFilter)\n//   );\n\n\n// };\n\nconst mapStateToProps = (state) => ({\n  contacts: getFilteredContacts(state),\n});\n\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDeleteContact: (contactId) =>\n    dispatch(phonebookOperations.deleteContact(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n"]},"metadata":{},"sourceType":"module"}