{"version":3,"sources":["redux/phonebook/phonebook-actions.js","components/Filter/Filter.jsx","redux/phonebook/phonebook-operations.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","App.js","redux/phonebook/phonebook-reducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","connect","state","value","contacts","filter","dispatch","onChange","e","target","type","className","name","axios","defaults","baseURL","a","get","data","number","contact","post","contactId","delete","ContactForm","nameInputId","shortId","generate","phoneInputId","handleNameChange","event","setState","currentTarget","handlePhoneChange","handleSubmit","preventDefault","props","onSubmit","reset","this","htmlFor","id","pattern","title","required","Component","phonebookOperations","ContactListItem","onDeleteContact","onClick","getFilteredContacts","allContacts","normalizedFilter","toLowerCase","includes","items","map","App","fetchContacts","isLoadingContacts","loading","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","rootReducer","phonebookReducer","store","configureStore","reducer","devTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44ac90c7.chunk.js","sourcesContent":["// import shortId from \"shortid\";\n// import axios from 'axios';\nimport { createAction } from \"@reduxjs/toolkit\";\n// import { number } from \"prop-types\";\n\n\nexport const fetchContactsRequest = createAction(\"contacts/fetchContactsRequest\");\nexport const fetchContactsSuccess = createAction(\"contacts/fetchContactsSuccess\");\nexport const fetchContactsError = createAction(\"contacts/fetchContactsError\");  \n\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\nexport const addContactError = createAction(\"contacts/addContactError\");  \n\nexport const deleteContactRequest = createAction(\"contacts/deleteContactRequest\");\nexport const deleteContactSuccess = createAction(\"contacts/deleteContactSuccess\");\nexport const deleteContactError = createAction(\"contacts/deleteContactError\"); \n\n\nexport const changeFilter = createAction(\"contacts/changeFilter\");\n\n// const actions = { addContactRequest, addContactSuccess, addContactError, deleteContact, filter };\n\n// export default actions;\n\n// / WITHOUT REDUX TOOLKIT\n\n// import shortId from 'shortid';\n// import actionTypes from './phonebook-types'\n\n// const addContact = ({name, number}) => (\n//     {\n//         type: actionTypes.ADD,\n//         payload: {\n//              id: shortId.generate(),\n//              name,\n//              number\n//         }\n//     }\n// )\n\n// const deleteContact = (contactId) => (\n//     {\n//   type: actionTypes.DELETE,\n//   payload: contactId,\n//   })\n\n//   const filter = (value) => ({\n//     type: actionTypes.FILTER,\n//     payload: value,\n//   });\n\n// export default { addContact, deleteContact, filter };\n","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport  {\n    changeFilter,\n} from \"../../redux/phonebook/phonebook-actions\";\n\nconst Filter = ({ value, onChange }) => (\n  <>\n    <h3>Find contacts by name</h3>\n    <input\n      type=\"text\"\n      className=\"input\"\n      value={value}\n      name=\"filter\"\n      onChange={onChange}\n    ></input>\n  </>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (e) => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import axios from \"axios\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from \"./phonebook-actions\";\r\naxios.defaults.baseURL = \"http://localhost:3000/\";\r\n\r\nconst fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nconst addContact = (name, number) => async (dispatch) => {\r\n  const contact = { name, number };\r\n  dispatch(addContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post(\"/contacts\", contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nconst deleteContact = (contactId) => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.delete(`/contacts/${contactId}`);\r\n  dispatch(deleteContactSuccess(contactId))\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error))\r\n  } \r\n\r\n};\r\n\r\n// const fetchContacts = () => (dispatch) => {\r\n//   dispatch(fetchContactsRequest());\r\n\r\n//   axios\r\n//     .get(\"/contacts\")\r\n//     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n//     .catch((error) => dispatch(fetchContactsError(error)));\r\n// };\r\n\r\n// const addContact = (name, number) => (dispatch) => {\r\n//   const contact = { name, number };\r\n\r\n//   dispatch(addContactRequest());\r\n\r\n//   axios\r\n//     .post(\"/contacts\", contact)\r\n//     .then(({ data }) => dispatch(addContactSuccess(data)))\r\n//     .catch((error) => dispatch(addContactError(error)));\r\n// };\r\n\r\n// const deleteContact = (contactId) => (dispatch) => {\r\n//   dispatch(deleteContactRequest());\r\n\r\n//   axios\r\n//     .delete(`/contacts/${contactId}`)\r\n//     .then(() => dispatch(deleteContactSuccess(contactId)))\r\n//     .catch((error) => dispatch(deleteContactError(error)));\r\n// };\r\n\r\nexport default { fetchContacts, addContact, deleteContact };\r\n","import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport phonebookOperations from \"../../redux/phonebook/phonebook-operations\";\nimport shortId from \"shortid\";\nimport \"./ContactForm.scss\";\nimport PropTypes from \"prop-types\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  nameInputId = shortId.generate();\n  phoneInputId = shortId.generate();\n\n\n\n  handleNameChange = (event) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  handlePhoneChange = (event) => {\n    this.setState({ number: event.currentTarget.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label className=\"form-label\" htmlFor={this.nameInputId}>\n          <span className=\"form-label-title\">Name</span>\n          <input\n            className=\"input\"\n            type=\"text\"\n            id={this.nameInputId}\n            value={this.state.name}\n            onChange={this.handleNameChange}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className=\"form-label\" htmlFor={this.phoneInputId}>\n          <span className=\"form-label-title\">Number</span>\n          <input\n            className=\"input\"\n            type=\"tel\"\n            id={this.phoneInputId}\n            value={this.state.number}\n            name=\"number\"\n            onChange={this.handlePhoneChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n          <button className=\"form-button button\" type=\"submit\">\n            Add contact\n          </button>\n        </label>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(phonebookOperations.addContact( name, number )),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","// import { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport \"./ContactList.scss\";\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => (\n  <li className=\"contact-list-item\">\n    <span className=\"contact-list-name\">{name} </span>\n    <span className=\"contact-list-number\">{number} </span>\n    <button\n      type=\"button\"\n      className=\"button\"\n      onClick={() => onDeleteContact(id)}\n    >\n      Delete\n    </button>\n  </li>\n);\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import { connect } from \"react-redux\";\nimport phonebookOperations from \"../../redux/phonebook/phonebook-operations\";\nimport ContactListItem from \"./ContactListItem\";\nimport \"./ContactList.scss\";\nimport PropTypes from \"prop-types\";\n\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  \n  return (\n  <ul className=\"contact-list\">\n    {contacts.map((contact) => (\n      <ContactListItem\n        id={contact.id}\n        key={contact.id}\n        name={contact.name}\n        number={contact.number}\n        onDeleteContact={onDeleteContact}\n      />\n    ))}\n  </ul>\n)};\n\n\n\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};\n\nconst getFilteredContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n    return allContacts.filter(({name}) =>\n    name.toLowerCase().includes(normalizedFilter)\n  );\n\n\n};\n\nconst mapStateToProps = ({ contacts:{ items, filter } }) => ({\n  contacts: getFilteredContacts(items, filter),\n});\n\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDeleteContact: (contactId) =>\n    dispatch(phonebookOperations.deleteContact(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import {Component} from 'react';\nimport {connect} from 'react-redux'\nimport Filter from \"./components/Filter/Filter\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport phonebookOperations from \"./redux/phonebook/phonebook-operations\";\nimport \"./styles.css\";\nimport \"./App.scss\";\n\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts()\n  }\n\n  render() {  \n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"phonebook\">\n            <h1>Phonebook</h1>\n            <ContactForm />\n            <h2>Contacts</h2>\n            <Filter />\n            {this.props.isLoadingContacts && <h1>Loading</h1>}\n            <ContactList />\n          </div>\n        </div>\n      </div>\n    );}\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: state.contacts.loading,\n})\n\nconst mapDispatchToProps = dispatch => ({\nfetchContacts: () => dispatch(phonebookOperations.fetchContacts())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n// import actionTypes from \"./phonebook-types\";\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n} from \"./phonebook-actions\";\n\n\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter((contact) => contact.id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n});\n\n///WITHOUT REDUX TOOLKIT\n// import {combineReducers} from 'redux';\n// import actionTypes from './phonebook-types'\n\n// const items=(state=[], {type, payload}) => {\n//   switch(type) {\n// case actionTypes.ADD:\n//   return [...state, payload];\n\n//     case actionTypes.DELETE:\n//   return state.filter(contact => contact.id !== payload);\n\n//     default:\n//     return state;\n\n//   }\n\n// }\n\n// const filter = (state = '', {type, payload}) => {\n//     switch (type) {\n//       case actionTypes.FILTER:\n//         return payload;\n\n//       default:\n//         return state;\n//     }\n// };\n\n// export default combineReducers({\n//     items,\n//     filter\n// })\n","import {\n  configureStore,\n  getDefaultMiddleware,\n  combineReducers,\n} from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport {\n  // persistStore,\n  // persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport phonebookReducer from \"./phonebook/phonebook-reducer\";\n// import storage from \"redux-persist/lib/storage\";\n\n// const myMiddleware = store => next => action =>  {\n//   console.log('My middleware', action);\n//   next(action)\n// }\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n// myMiddleware,\n  logger,\n];\n\n// const contactsPersistConfig = {\n//   key: \"contacts\",\n//   storage,\n//   blacklist: [\"filter\"],\n// };\n\n// const rootReducer = combineReducers({\n//   contacts: persistReducer(contactsPersistConfig, phonebookReducer),\n// });\n\nconst rootReducer = combineReducers({\n  contacts: phonebookReducer,\n});\n\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware,\n  devTools: true,\n  // devTools: process.env.NODE_ENV === \"development\",\n});\n\n// const persistor = persistStore(store);\n\n// const storeFunc = { store, persistor };\n\n// export default storeFunc;\n\nexport default store;\n\n//// WITHOUT REDUX TOOLKIT\n// import { createStore, combineReducers } from \"redux\";\n// import { composeWithDevTools } from \"redux-devtools-extension\";\n// import phonebookReducer from \"./phonebook/phonebook-reducer\";\n\n// const rootReducer = combineReducers({\n//   phonebook: phonebookReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\n// export default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\n// import { PersistGate } from \"redux-persist/integration/react\";\n// import storeFunc from \"./redux/store\";\nimport store from \"./redux/store\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={storeFunc.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}